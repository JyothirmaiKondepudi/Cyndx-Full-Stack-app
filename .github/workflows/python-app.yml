# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.11
      uses: actions/setup-python@v3
      with:
        python-version: "3.11"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        pip install -r backend/requirements.txt
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with :
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with :
        node-version: "18"
    - name: Install and Run React
      working-directory: ./frontend
      run: |
        npm ci
        npm run build
    - name: Sync build/ â†’ S3
      run: |
          aws s3 sync ./frontend/build s3://cyndx-frontend-code --delete

    - name: Invalidate CloudFront cache
      run: |
          aws cloudfront create-invalidation \
            --distribution-id EIGCCJJDPKNAU \
            --paths '/*'
    - name: Login to ECR
      run : |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{secrets.ECR_REGISTRY}}

    - name: Build amd64 image
      run: |
          docker build -t backend ./backend
    - name: Tag Docker image
      run : |
          docker tag backend:latest ${{secrets.ECR_REGISTRY}}:amd64
    - id: build-and-push 
      name: Push amd64 image
      run: |
          docker push ${{secrets.ECR_REGISTRY}}:amd64
          echo "arch=amd64" >> $GITHUB_OUTPUT
       
    - name: Update Lambda to AMD image
      if: steps.build-and-push.outputs.arch == 'amd64' 
      run: |
        aws lambda update-function-configuration \
          --function-name form_management_service \
          --architectures x86_64

        aws lambda update-function-code \
          --function-name form_management_service \
          --image-uri ${{secrets.ECR_REGISTRY}}:amd64

    - name: Sleep for 15
      run: |
          sleep 15
    - name: Invoke API Gateway
      run: |
          aws apigateway test-invoke-method \
            --rest-api-id ${{ secrets.API_ID }} \
            --region ${{ secrets.AWS_REGION }} \
            --resource-id ${{ secrets.RESOURCE_ID }} \
            --http-method GET \
            --path-with-query-string "/api/submissions"


      
